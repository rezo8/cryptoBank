services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka-setup:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      # Wait for Kafka to be ready
      while ! kafka-topics --bootstrap-server kafka:9092 --list; do
        echo 'Waiting for Kafka to be ready...'
        sleep 1
      done
      
      # Create the topic
      kafka-topics --bootstrap-server kafka:9092 --create --topic transactionEvents --partitions 8 --replication-factor 1
      echo 'Topic transactionEvents created successfully'
      "
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  flyway:
    image: flyway/flyway:11.2.0
    environment:
      FLYWAY_URL: jdbc:postgresql://db:5432/postgres
      FLYWAY_USER: myuser
      FLYWAY_PASSWORD: mypassword
      FLYWAY_LOCATIONS: filesystem:/flyway/sql
    volumes:
      - ./flyway/sql:/flyway/sql
    command: [ "migrate" ]
    depends_on:
      db:
        condition: service_healthy

  app:
    build: .
    ports:
      - "8080:8080"
    environment:
      DB_URL: "jdbc:postgresql://db:5432/postgres"
      DB_USER: myuser
      DB_PASSWORD: mypassword
    command: [ "./wait-for-it.sh", "db:5432", "--", "java", "-jar", "/app/app.jar"]
    depends_on:
      flyway:
        condition: service_completed_successfully

volumes:
  postgres_data:
